<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
		PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
		"http://www.mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
	<!--导入属性配置-->
	<properties resource="datasource.properties"/>

	<!--指定特定数据库的jdbc驱动jar包的位置-->
	<classPathEntry location="${db.driverLocation}"/>

	<!--
    context:生成一组对象的环境
    id:必选，上下文id，用于在生成错误时提示
    defaultModelType:指定生成对象的样式
        1，conditional：类似hierarchical；
        2，flat：所有内容（主键，blob）等全部生成在一个对象中；
        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
    targetRuntime:
        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
    introspectedColumnImpl：类全限定名，用于扩展MBG
    -->
	<context id="default" targetRuntime="MyBatis3">

		<!-- optional，旨在创建class时，对注释进行控制 -->
		<commentGenerator>
			<property name="suppressDate" value="true"/>
			<property name="suppressAllComments" value="true"/>
		</commentGenerator>

		<!--jdbc的数据库连接 必须要有配置数据库的连接 -->
		<jdbcConnection
				driverClass="${db.driverClassName}"
				connectionURL="${db.url}"
				userId="${db.username}"
				password="${db.password}">
		</jdbcConnection>


		<!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制 java类型处理器
        用于处理DB中的类型到Java中的类型 默认使用JavaTypeResolverDefaultImpl；-->
		<javaTypeResolver>
			<!--
		   true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
		   false：默认,
			   scale>0;length>18：使用BigDecimal;
			   scale=0;length[10,18]：使用Long；
			   scale=0;length[5,9]：使用Integer；
			   scale=0;length<5：使用Short；
		    -->
			<property name="forceBigDecimals" value="false"/>
		</javaTypeResolver>


		<!--java模型创建器，是必须要的元素 Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
			targetPackage     指定生成的model生成所在的包名
			targetProject     指定在该项目下所在的路径
		-->
		<!--<javaModelGenerator targetPackage="com.mall.pojo" targetProject=".\src\main\java">-->
		<javaModelGenerator targetPackage="com.mall.pojo" targetProject="./src/main/java">
			<!-- 是否允许子包，即targetPackage.schemaName.tableName
			在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false  -->
			<property name="enableSubPackages" value="false"/>
			<!-- 是否对model添加 构造函数 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；-->
			<property name="constructorBased" value="true"/>
			<!-- 是否对类CHAR类型的列的数据进行trim操作 空字符串处理 设置是否在getter方法中，对String类型字段调用trim()方法 -->
			<property name="trimStrings" value="true"/>
			<!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
			<property name="immutable" value="false"/>
			<!-- 设置一个根对象，
		   如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项
		   注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：
			   1，属性名相同，类型相同，有相同的getter/setter方法；
		-->
<!--			<property name="rootClass" value="com._520it.mybatis.domain.BaseDomain"/>-->
		</javaModelGenerator>

		<!--mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
		<!--<sqlMapGenerator targetPackage="mappers" targetProject=".\src\main\resources">-->
		<sqlMapGenerator targetPackage="mappers" targetProject="./src/main/resources">
			<property name="enableSubPackages" value="false"/>
		</sqlMapGenerator>

		<!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
				type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
				type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
				type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
		-->

		<!-- targetPackage：mapper接口dao生成的位置 -->
		<!--<javaClientGenerator type="XMLMAPPER" targetPackage="com.mmall.dao" targetProject=".\src\main\java">-->
		<javaClientGenerator type="XMLMAPPER" targetPackage="com.mall.dao" targetProject="./src/main/java">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false"/>
		</javaClientGenerator>

		<!-- 数据库中的表配置 -->

		<table tableName="mmall_shipping" domainObjectName="Shipping" enableCountByExample="false"
			   enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false"
			   selectByExampleQueryId="false"></table>
		<table tableName="mmall_cart" domainObjectName="Cart" enableCountByExample="false" enableUpdateByExample="false"
			   enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"></table>
		<table tableName="mmall_cart_item" domainObjectName="CartItem" enableCountByExample="false"
			   enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false"
			   selectByExampleQueryId="false"></table>
		<table tableName="mmall_category" domainObjectName="Category" enableCountByExample="false"
			   enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false"
			   selectByExampleQueryId="false"></table>
		<table tableName="mmall_order" domainObjectName="Order" enableCountByExample="false"
			   enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false"
			   selectByExampleQueryId="false"></table>
		<table tableName="mmall_order_item" domainObjectName="OrderItem" enableCountByExample="false"
			   enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false"
			   selectByExampleQueryId="false"></table>
		<table tableName="mmall_pay_info" domainObjectName="PayInfo" enableCountByExample="false"
			   enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false"
			   selectByExampleQueryId="false"></table>
		<table tableName="mmall_product" domainObjectName="Product" enableCountByExample="false"
			   enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false"
			   selectByExampleQueryId="false">
			<columnOverride column="detail" jdbcType="VARCHAR"/>
			<columnOverride column="sub_images" jdbcType="VARCHAR"/>
		</table>
		<table tableName="mmall_user" domainObjectName="User" enableCountByExample="false" enableUpdateByExample="false"
			   enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"></table>


		<!-- geelynote mybatis插件的搭建 -->
	</context>
</generatorConfiguration>